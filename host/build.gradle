plugins {
    id 'application'
    id 'org.springframework.boot' version '2.2.0.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'java'
}

mainClassName = "com.r3.conclave.sample.host.Host"

// Override the default (simulation) with -PenclaveMode=
def mode = findProperty("enclaveMode")?.toString()?.toLowerCase() ?: "simulation"

// Create a task that can be used for generating signing materials
tasks.register("prepareForSigning") {
    it.dependsOn(":enclave:generateEnclaveSigningMaterial" + mode.capitalize())
}

dependencies {
    implementation "com.r3.conclave:conclave-host:$conclaveVersion"

    // We need the enclave at runtime but not when compiling the host, because they don't share types.
    runtimeOnly project(path: ":enclave", configuration: mode)
    runtimeOnly "org.slf4j:slf4j-simple:1.7.30"

    // For tests only we depend on the enclave module so we can also use a mock enclave where the enclave object exists
    // in the host JVM instead of a sub-JVM.
    testImplementation project(":enclave")
    testImplementation "com.r3.conclave:conclave-testing:$conclaveVersion"
    testImplementation "org.junit.jupiter:junit-jupiter:5.6.0"

    implementation "com.r3.conclave:conclave-host"
    implementation 'org.springframework.boot:spring-boot-starter-web'
//    testImplementation('org.springframework.boot:spring-boot-starter-test') {
//        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
//    }
    compile "com.fasterxml.jackson.module:jackson-module-kotlin:2.11.+"
    implementation 'com.google.code.gson:gson:2.8.6'

}

test {
    // Pass through any -Pspid and -Pattestation-key parameters to the tests
    systemProperties project.properties.subMap(["spid", "attestation-key"])
    testLogging {
        outputs.upToDateWhen { false }
        showStandardStreams = true
    }
}

configurations {
    compile.exclude module: 'spring-boot-starter-logging'
}